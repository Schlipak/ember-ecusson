//
// Button element for Ecusson
//

// Base button style
button, .button {
  display: inline-block;
  position: relative;

  padding: .4em .8em;
  margin: .1em;

  border: none;
  border-radius: $sizing-element-border-radius;
  outline: none;
  background-color: $color-white-off;

  font-family: $font-regular;
  text-decoration: none;
  text-align: center;
  color: $color-black;
  font-weight: normal;
  font-size: 1em;

  cursor: pointer;
  transition: background-color .3s, color .3s, border-color .3s, opacity .3s;

  overflow: hidden;
  @include webkit-border-radius-fix;

  > span {
    position: relative;
    z-index: 10;
  }

  @include no-select;
  @include moz-button-style-fix;

  &.nobreak {
    white-space: nowrap;
  }

  &:hover, &:focus {
    background-color: lighten($color-white-off-dark, 10%);
  }

  &:active {
    background-color: $color-white-off-dark;
  }

  &.expand {
    display: block;
    width: 100%;
  }

  &.black {
    background-color: lighten($color-black, 20%);
    color: $color-white;

    &:hover, &:focus {
      background-color: lighten($color-black, 10%);
    }

    &:active {
      background-color: $color-black;
    }

    &.basic {
      background-color: transparent;
      color: lighten($color-black, 20%);
      border-color: lighten($color-black, 20%);

      &:hover, &:focus {
        background-color: lighten($color-black, 20%);
        color: $color-white;
      }

      &:active {
        background-color: lighten($color-black, 10%);
        border-color: lighten($color-black, 10%);
        color: $color-white;
      }
    } //! &.basic
  } //! &.black

  &.night {
    background-color: $color-night-blue-dark;
    color: $color-white;

    &:hover, &:focus {
      background-color: darken($color-night-blue-dark, 5%);
    }

    &:active {
      background-color: darken($color-night-blue-dark, 10%);
    }

    &.basic {
      background-color: transparent;
      color: $color-night-blue-dark;
      border-color: $color-night-blue-dark;

      &:hover, &:focus {
        background-color: $color-night-blue-dark;
        border-color: $color-night-blue-dark;
        color: $color-white;
      }

      &:active {
        background-color: darken($color-night-blue-dark, 5%);
        border-color: darken($color-night-blue-dark, 5%);
        color: $color-white;
      }
    } //! &.basic
  } //! &.night

  &.white {
    background-color: $color-white;
    color: $color-black !important;

    &:hover, &:focus {
      background-color: $color-white-off;
    }

    &:active {
      background-color: $color-white-off-dark;
    }

    &.basic {
      background-color: transparent;
      color: $color-white !important;
      border-color: $color-white;

      &:hover, &:focus {
        background-color: $color-white;
        border-color: $color-white;
        color: $color-black !important;
      }

      &:active {
        background-color: $color-white-off-dark;
        border-color: $color-white-off-dark;
        color: $color-black !important;
      }
    } //! &.basic
  } //! &.white

  &.basic {
    background-color: transparent;
    border-width: .15em;
    border-style: solid;

    &:hover, &:focus {
      background-color: darken($color-grey-dark, 20%);
      border-color: darken($color-grey-dark, 20%);
      color: $color-white;
    }

    &:active {
      background-color: darken($color-grey-dark, 30%);
      border-color: darken($color-grey-dark, 30%);
    }
  } //! .basic

  &.rounded {
    border-radius: 1.1em;

    &.basic {
      border-radius: 1.25em;
    }
  }

  &.square {
    border-radius: 0em !important;
  }

  > .icon {
    margin: 0 .25em;
    pointer-events: none;
  }
}

// Colored button styles
button, .button {
  $i: 1;

  @each $kvp in $--std-colors {
    $light: nth($kvp, 2);
    $dark: nth(nth($--std-colors-dark, $i), 2);

    &.#{nth($kvp, 1)} {
      background-color: $light;
      color: color-contrast($light, $color-black, $color-white);

      &:hover, &:focus {
        background-color: $dark;
        color: color-contrast($dark, $color-black, $color-white);
      }

      &:active {
        background-color: darken($dark, 10%);
        color: color-contrast(darken($dark, 10%), $color-black, $color-white);
      }

      &.basic {
        background-color: transparent;
        color: $light;
        border-color: $light;

        &:hover, &:focus {
          background-color: $light;
          color: color-contrast($light, $color-black, $color-white);
        }

        &:active {
          background-color: $dark;
          border-color: $dark;
          color: color-contrast($dark, $color-black, $color-white);
        }
      } //! &.basic

      $j: 1;
      @each $shade-source in $--std-colors {
        $light-shade: nth($shade-source, 2);
        $dark-shade: nth(nth($--std-colors-dark, $j), 2);

        &.#{nth($shade-source, 1)}-shaded {
          @include linear-gradient(
            to right,
            $light 0%,
            $light-shade 100%,
            $fallback: $light
          );

          &:before {
            content: '';
            display: block;
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;

            @include linear-gradient(
              to right,
              $dark-shade 0%,
              $dark 100%,
              $fallback: $dark-shade
            );

            transition: opacity .8s;
            opacity: 0;

            pointer-events: none;
            @include no-select;
            z-index: 0;
          }

          &:after {
            content: '';
            display: block;
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;

            @include linear-gradient(
              to right,
              darken($dark-shade, 10%) 0%,
              darken($dark, 10%) 100%,
              $fallback: darken($dark-shade, 10%)
            );

            transition: opacity .8s;
            opacity: 0;

            pointer-events: none;
            @include no-select;
            z-index: 1;
          }

          &:hover, &:focus {
            &:before {
              opacity: 1;
            }
          }

          &:active {
            &:after {
              opacity: 1;
            }
          }
        }

        $j: $j + 1;
      } //! @each shade
    } //! &.{{color}}.button

    $i: $i + 1;
  } //! @each

  &.hover-black {
    &:hover, &:focus {
      background-color: lighten($color-black, 10%);
      color: $color-white;
    }

    &:active {
      background-color: $color-black;
      color: $color-white;
    }

    &.basic {
      &:hover, &:focus {
        border-color: lighten($color-black, 20%);
        background-color: lighten($color-black, 20%);
        color: $color-white;
      }

      &:active {
        background-color: lighten($color-black, 10%);
        border-color: lighten($color-black, 10%);
        color: $color-white;
      }
    } //! &.basic
  } //! &.black

  &.hover-white {
    &:hover, &:focus {
      color: $color-black !important;
      background-color: $color-white-off;
    }

    &:active {
      color: $color-black !important;
      background-color: $color-white-off-dark;
    }

    &.basic {
      &:hover, &:focus {
        background-color: $color-white;
        border-color: $color-white;
        color: $color-black !important;
      }

      &:active {
        background-color: $color-white-off-dark;
        border-color: $color-white-off-dark;
        color: $color-black !important;
      }
    } //! &.basic
  } //! &.white

  $i: 1;
  @each $kvp in $--std-colors {
    $light: nth($kvp, 2);
    $dark: nth(nth($--std-colors-dark, $i), 2);

    &.hover-#{nth($kvp, 1)} {
      &:hover, &:focus {
        background-color: $dark;
        color: color-contrast($dark, $color-black, $color-white) !important;
      }

      &:active {
        background-color: darken($dark, 10%);
        color: color-contrast(darken($dark, 10%), $color-black, $color-white) !important;
      }

      &.basic {
        &:hover, &:focus {
          border-color: $light;
          background-color: $light;
          color: color-contrast($light, $color-black, $color-white) !important;
        }

        &:active {
          background-color: $dark;
          border-color: $dark;
          color: color-contrast($dark, $color-black, $color-white) !important;
        }
      } //! &.basic
    } //! hover-{color}

    $i: $i + 1;
  } //! @each
}

// Social network colored button styles
@each $kvp in $--std-colors-social {
  $light: nth($kvp, 2);
  $dark: darken($light, 10%);

  button.#{nth($kvp, 1)}, .button.#{nth($kvp, 1)} {
    background-color: $light;
    color: color-contrast($light, $color-black, $color-white);

    &:hover, &:focus {
      background-color: $dark;
      color: color-contrast($dark, $color-black, $color-white);
    }

    &:active {
      background-color: darken($dark, 10%);
      color: color-contrast(darken($dark, 10%), $color-black, $color-white);
    }

    &.basic {
      background-color: transparent;
      color: $light;
      border-color: $light;

      &:hover, &:focus {
        background-color: $light;
        color: color-contrast($light, $color-black, $color-white);
      }

      &:active {
        background-color: $dark;
        border-color: $dark;
        color: color-contrast($dark, $color-black, $color-white);
      }
    } //! &.basic
  }
}

// Split buttons
button.split, .button.split {
  display: inline-flex;
  justify-content: space-between;
  align-items: center;

  padding: 0;
  white-space: nowrap;

  overflow: hidden;
  @include webkit-border-radius-fix;

  span {
    display: inline-block;
  }

  &.right {
    padding-left: 1.2em;

    .sub {
      margin-left: 1.2em;
      margin-right: 0;
      border-top-left-radius: 0;
      border-bottom-left-radius: 0;

      &.icon, .icon {
        margin-right: 0;
      }
    }
  } //! &.right

  &.left {
    padding-right: 1.2em;

    .sub {
      margin-right: 1.2em;
      margin-left: 0;
      border-top-right-radius: 0;
      border-bottom-right-radius: 0;

      &.icon, .icon {
        margin-left: 0;
      }
    }
  } //! &.left

  .sub {
    display: inline-flex;
    justify-content: center;
    align-items: center;
    position: relative;
    height: 100%;
    padding: .6em;

    min-height: 1em;

    background-color: rgba(0, 0, 0, .1);
    border-radius: $sizing-element-border-radius;
  } //! .sub

  &.basic {
    .sub {
      border-top-width: 0;
      border-bottom-width: 0;
    }

    &.left {
      .sub {
        border-left-width: 0;
      }
    } //! &.left

    &.right {
      border-right-width: 0;
    } //! &.right
  } //! &.basic
}

a.button {
  display: inline-block;

  &::after {
    display: none;
  }
}

// Disabled buttons
button, .button {
  &:before {
    content: '';
    display: none;
    position: absolute;

    top: 0;
    left: 0;
    width: 100%;
    height: 100%;

    background-color: inherit;

    pointer-events: none;
    z-index: 100;
  }

  &:after {
    content: '';
    display: none;
    position: absolute;

    top: 50%;
    left: 50%;

    width: 1em;
    height: 1em;

    border-radius: 50%;
    border-style: solid;
    border-width: .25em;
    border-color: currentColor transparent transparent transparent;

    transform: translate(-50%, -50%) rotateZ(0deg);

    pointer-events: none;
    z-index: 200;
  }

  &[disabled] {
    opacity: .5;
    cursor: default;

    pointer-events: none;
  }

  &.loading {
    &:before {
      display: block;
    }

    &:after {
      display: block;

      animation-name: animationButtonLoader;
      animation-duration: .75s;
      animation-timing-function: linear;
      animation-iteration-count: infinite;
    }
  }
}

@keyframes animationButtonLoader {
  from {
    transform: translate(-50%, -50%) rotateZ(0deg);
  }
  to {
    transform: translate(-50%, -50%) rotateZ(360deg);
  }
}
